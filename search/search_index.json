{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Prerequisites De volgende applicaties zijn nodig: VSCode: 1.98.2 of hoger STM32CubeCLT : >= 1.18.0 STM32CubeMX : >= 6.14.0 ST-MCU-FINDER-PC : >= 6.1.0 STM32 VSCode Extension Verder worden de volgende extenties aangeraden voor VSCode: GitHub Suport GitHub Pull Requests Markdown support Markdown All in One Markdown Table markdownlint CMake CMake Tools C/C++ C/C++ C/C++ Extension pack Hardware Voor het ontwikkelen van de software wordt gebruik gemaakt van de Nucleo-F412ZG Development board Middlewares Voor het schrijven van de log op de SD card wordt gebruik gemaakt van een stukje code in Middlewares/gwtonn/sd_logger.c . Deze code is betrekkelijk simpel. In het vervolg moet hier de logica zitten om de juiste info in de file te krijgen. [!IMPORTANT] Voor de startLogTask is 3000 WORDS gereserveerd op de stack. We moeten dus opletten met de code (en dus ook wat opschonen). De functie startLogTask wacht op een item in de queue. Wanneer deze binnen komt, dan wordt er een string gemaakt. Deze string wordt naar de UART gestuurd en ook naar de SD_LOGGER. Voor de sd_logger wordt ook gebruik gemaakt van een MUTEX om te voorkomen dat er 2 schrijfacties tegelijk plaatsvinden. Voor mee details kan je kijken in de beschrijving van de bibliotheek . Tips & Tricks Hoe vindt ik mijn STM32 Nuleo USB port in Windows 11 met PowerShell Get-PnpDevice -PresentOnly | Where-Object { $_.InstanceId -match '^USB' } Debug of upload geeft een foutmelding Mijn VSCode can de code niet compileren Controleer of the juiste instellingen voor STM32 zijn gemaakt.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#prerequisites","text":"De volgende applicaties zijn nodig: VSCode: 1.98.2 of hoger STM32CubeCLT : >= 1.18.0 STM32CubeMX : >= 6.14.0 ST-MCU-FINDER-PC : >= 6.1.0 STM32 VSCode Extension Verder worden de volgende extenties aangeraden voor VSCode:","title":"Prerequisites"},{"location":"#github-suport","text":"GitHub Pull Requests","title":"GitHub Suport"},{"location":"#markdown-support","text":"Markdown All in One Markdown Table markdownlint","title":"Markdown support"},{"location":"#cmake","text":"CMake Tools","title":"CMake"},{"location":"#cc","text":"C/C++ C/C++ Extension pack","title":"C/C++"},{"location":"#hardware","text":"Voor het ontwikkelen van de software wordt gebruik gemaakt van de Nucleo-F412ZG Development board","title":"Hardware"},{"location":"#middlewares","text":"Voor het schrijven van de log op de SD card wordt gebruik gemaakt van een stukje code in Middlewares/gwtonn/sd_logger.c . Deze code is betrekkelijk simpel. In het vervolg moet hier de logica zitten om de juiste info in de file te krijgen. [!IMPORTANT] Voor de startLogTask is 3000 WORDS gereserveerd op de stack. We moeten dus opletten met de code (en dus ook wat opschonen). De functie startLogTask wacht op een item in de queue. Wanneer deze binnen komt, dan wordt er een string gemaakt. Deze string wordt naar de UART gestuurd en ook naar de SD_LOGGER. Voor de sd_logger wordt ook gebruik gemaakt van een MUTEX om te voorkomen dat er 2 schrijfacties tegelijk plaatsvinden. Voor mee details kan je kijken in de beschrijving van de bibliotheek .","title":"Middlewares"},{"location":"#tips-tricks","text":"","title":"Tips &amp; Tricks"},{"location":"#hoe-vindt-ik-mijn-stm32-nuleo-usb-port-in-windows-11-met-powershell","text":"Get-PnpDevice -PresentOnly | Where-Object { $_.InstanceId -match '^USB' }","title":"Hoe vindt ik mijn STM32 Nuleo USB port in Windows 11 met PowerShell"},{"location":"#debug-of-upload-geeft-een-foutmelding","text":"","title":"Debug of upload geeft een foutmelding"},{"location":"#mijn-vscode-can-de-code-niet-compileren","text":"Controleer of the juiste instellingen voor STM32 zijn gemaakt.","title":"Mijn VSCode can de code niet compileren"},{"location":"about/","text":"Over deze site Op deze site kan de documentatie van GWTONN gevonden worden.","title":"Over"},{"location":"about/#over-deze-site","text":"Op deze site kan de documentatie van GWTONN gevonden worden.","title":"Over deze site"},{"location":"coding_conventions/","text":"Coding conventions Taal De volgende taal is geadviseerd: Onderdeel Taal Reden Source Code (+commentaar) Engels (UK) Dit is de defacto standaard. STM32 code is in Engels, voorbeelden zijn in Engels en documentation op Internet ook Documentatie (buiten source code) Nederlands Ge Wit't Oit Noit Nie is een Nederlandse lokale vereniging. Standaard taal is Nederlands. De documentatie sluit daar beter op aan Bestandsnamen lower_case Wanneer je eigen bestanden toevoegd (zoals in de docs/ folder), dan wordt dit altijd in lower_case gedaan. [!NOTE] Als uitzondering zijn \"CONTRIBUTING.md\", \"README.md\" en \"LICENSE\". Deze volgen een algemene conventie. [!IMPORTANT] Bestanden die gemaakt zijn STM32CubeMX zijn ook uitgezonderd. Underscore Wanneer een bestandsnaam uit meerdere woorden bestaad (zoals in dit bestand), dan wordt er altijd gebruik gemaakt van een underscore . Markdown Voor de documentatie word gebruik gemaakt van Markdown. Meer specifiek de GitHub variant: GitHub specificatie","title":"Coding Conventies"},{"location":"coding_conventions/#coding-conventions","text":"","title":"Coding conventions"},{"location":"coding_conventions/#taal","text":"De volgende taal is geadviseerd: Onderdeel Taal Reden Source Code (+commentaar) Engels (UK) Dit is de defacto standaard. STM32 code is in Engels, voorbeelden zijn in Engels en documentation op Internet ook Documentatie (buiten source code) Nederlands Ge Wit't Oit Noit Nie is een Nederlandse lokale vereniging. Standaard taal is Nederlands. De documentatie sluit daar beter op aan","title":"Taal"},{"location":"coding_conventions/#bestandsnamen","text":"","title":"Bestandsnamen"},{"location":"coding_conventions/#lower_case","text":"Wanneer je eigen bestanden toevoegd (zoals in de docs/ folder), dan wordt dit altijd in lower_case gedaan. [!NOTE] Als uitzondering zijn \"CONTRIBUTING.md\", \"README.md\" en \"LICENSE\". Deze volgen een algemene conventie. [!IMPORTANT] Bestanden die gemaakt zijn STM32CubeMX zijn ook uitgezonderd.","title":"lower_case"},{"location":"coding_conventions/#underscore","text":"Wanneer een bestandsnaam uit meerdere woorden bestaad (zoals in dit bestand), dan wordt er altijd gebruik gemaakt van een underscore .","title":"Underscore"},{"location":"coding_conventions/#markdown","text":"Voor de documentatie word gebruik gemaakt van Markdown. Meer specifiek de GitHub variant: GitHub specificatie","title":"Markdown"},{"location":"programma/","text":"Programma Het hele idee van de controller is om een progarmma uit te voeren. Om dit flexibel te maken, is er een basis instructieset gemaakt. Met deze instructieset kan een programma gemaakt worden. Programmeren Maak een bestand met de naam \"programma.h\" en plaats hierin het programma. Zie voorbeeld programma voor een voorbeeld. Ieder programma moet minimaal een OPCODE_HALT regel bevatten. Het programma wordt weggeschreven in een vast stukje van het geheugen: offset 0x08000000 + grote van FLASH . Dit is terug te vinden in het onderstaande stukje in de STM32F412XX_FLASH.ld . We hebben te maken met een 32-bit system, daarom kunnen we uitgaan van de volgende grote: OPCODE : 4 bytes void * : 4 bytes Dus de grootte van de struct, voordat eventuele padding wordt toegepast, is: OPCODE + (3 x VOID ) = 16 bytes *. Voor een array met 255 elementen, is de totale benodigde grootte: 255 * 16 = 4080 bytes. /*Specify the memory areas*/ MEMORY { RAM (xrw) : ORIGIN = 0x20000000, LENGTH = 256K FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 1024K - 4080 RESERVED (rw) : ORIGIN = 0x08000000 + (1024K - 4080), LENGTH = 4080 } Data gebruik Na het linken van de code, wordt er een overzicht gegeven van het geheugen en de grote. De volgende 3 regio's zijn aanwezig: RAM FLASH RESERVED Het programma wordt opgeslagen in het RESERVED blok. De volledige block is beschikbaar voor het maken van een programma. Voorbeeld van een output. In deze output is te zien dat 5.49% gebruikt is. [build] Memory region Used Size Region Size %age Used [build] RAM: 25872 B 256 KB 9.87% [build] FLASH: 55824 B 1044496 B 5.34% [build] RESERVED: 224 B 4080 B 5.49% Instuctieset Een programma kan gemaakt worden door het opzetten van een instructie set. De onderstaande tabel bevat een overzicht van de functies. Functie OpCode Parameter 0 Parameter 1 Parameter 2 Omschrijving OPCODE_HALT 0x00 Stop met het uitvoeren van de programma. OPCODE_JUMP 0x01 index (0-bound) van de volgende instructie Laat het programma \"springen\" naar de instructie met index Parameter0 OPCODE_STORE_SHUTDOWN_INDEX 0x02 Index waar het programma naar toe moet om af te sluiten (0-bound) Laat het programma \"spingen\" naar deze positie als de pauze trigger gedaan wordt. OPCODE_PIN_TOGGLE 0x10 GPIOx \u2013 Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices GPIO_Pin \u2013 Specifies the pins to be toggled. Zet een pin op hoog als deze laag is; Zet een pin op laag als deze hoog is. OPCODE_PIN_STATE 0x11 GPIOx \u2013 Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices GPIO_Pin \u2013 Specifies the pins to be toggled GPIO_PIN_SET of GPIO_PIN_RESET Zet de status van een pin OPCODE_DELAY 0x20 De gewenste delay in MS Laat het programma wachten voor x ms OPCODE_LOG_PROGRAM_STATE 0x21 n/a Stuur de huidige status van het programma (alle registers) naar de log Voorbeeld programma Simple programma om de blauwe led te knipperen Declareer de blauwe led met BLUE_LED_Pin en zorg dat deze op BLUE_LED_GPIO_Port gemount zit. #ifndef __PROGRAMMA_H__ #define __PROGRAMMA_H__ #include <program_controller.h> #include <main.h> volatile MEM_PROGRAM_DATA_BLOCK instruction_t instruction[] = { {.opcode = OPCODE_PIN_STATE, .parameter0 = (void *)BLUE_LED_Pin, .parameter1 = (void *)BLUE_LED_GPIO_Port, .parameter2 = (void *)GPIO_PIN_SET}, {.opcode = OPCODE_DELAY, .parameter0 = (void *)1500}, {.opcode = OPCODE_PIN_TOGGLE, .parameter0 = (void *)BLUE_LED_Pin, .parameter1 = (void *)BLUE_LED_GPIO_Port}, {.opcode = OPCODE_JUMP, .parameter0 = (void *)1}, {.opcode = OPCODE_HALT}, }; #endif // __PROGRAMMA_H__","title":"Programma specificaties"},{"location":"programma/#programma","text":"Het hele idee van de controller is om een progarmma uit te voeren. Om dit flexibel te maken, is er een basis instructieset gemaakt. Met deze instructieset kan een programma gemaakt worden.","title":"Programma"},{"location":"programma/#programmeren","text":"Maak een bestand met de naam \"programma.h\" en plaats hierin het programma. Zie voorbeeld programma voor een voorbeeld. Ieder programma moet minimaal een OPCODE_HALT regel bevatten. Het programma wordt weggeschreven in een vast stukje van het geheugen: offset 0x08000000 + grote van FLASH . Dit is terug te vinden in het onderstaande stukje in de STM32F412XX_FLASH.ld . We hebben te maken met een 32-bit system, daarom kunnen we uitgaan van de volgende grote: OPCODE : 4 bytes void * : 4 bytes Dus de grootte van de struct, voordat eventuele padding wordt toegepast, is: OPCODE + (3 x VOID ) = 16 bytes *. Voor een array met 255 elementen, is de totale benodigde grootte: 255 * 16 = 4080 bytes. /*Specify the memory areas*/ MEMORY { RAM (xrw) : ORIGIN = 0x20000000, LENGTH = 256K FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 1024K - 4080 RESERVED (rw) : ORIGIN = 0x08000000 + (1024K - 4080), LENGTH = 4080 }","title":"Programmeren"},{"location":"programma/#data-gebruik","text":"Na het linken van de code, wordt er een overzicht gegeven van het geheugen en de grote. De volgende 3 regio's zijn aanwezig: RAM FLASH RESERVED Het programma wordt opgeslagen in het RESERVED blok. De volledige block is beschikbaar voor het maken van een programma. Voorbeeld van een output. In deze output is te zien dat 5.49% gebruikt is. [build] Memory region Used Size Region Size %age Used [build] RAM: 25872 B 256 KB 9.87% [build] FLASH: 55824 B 1044496 B 5.34% [build] RESERVED: 224 B 4080 B 5.49%","title":"Data gebruik"},{"location":"programma/#instuctieset","text":"Een programma kan gemaakt worden door het opzetten van een instructie set. De onderstaande tabel bevat een overzicht van de functies. Functie OpCode Parameter 0 Parameter 1 Parameter 2 Omschrijving OPCODE_HALT 0x00 Stop met het uitvoeren van de programma. OPCODE_JUMP 0x01 index (0-bound) van de volgende instructie Laat het programma \"springen\" naar de instructie met index Parameter0 OPCODE_STORE_SHUTDOWN_INDEX 0x02 Index waar het programma naar toe moet om af te sluiten (0-bound) Laat het programma \"spingen\" naar deze positie als de pauze trigger gedaan wordt. OPCODE_PIN_TOGGLE 0x10 GPIOx \u2013 Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices GPIO_Pin \u2013 Specifies the pins to be toggled. Zet een pin op hoog als deze laag is; Zet een pin op laag als deze hoog is. OPCODE_PIN_STATE 0x11 GPIOx \u2013 Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices GPIO_Pin \u2013 Specifies the pins to be toggled GPIO_PIN_SET of GPIO_PIN_RESET Zet de status van een pin OPCODE_DELAY 0x20 De gewenste delay in MS Laat het programma wachten voor x ms OPCODE_LOG_PROGRAM_STATE 0x21 n/a Stuur de huidige status van het programma (alle registers) naar de log","title":"Instuctieset"},{"location":"programma/#voorbeeld-programma","text":"","title":"Voorbeeld programma"},{"location":"programma/#simple-programma-om-de-blauwe-led-te-knipperen","text":"Declareer de blauwe led met BLUE_LED_Pin en zorg dat deze op BLUE_LED_GPIO_Port gemount zit. #ifndef __PROGRAMMA_H__ #define __PROGRAMMA_H__ #include <program_controller.h> #include <main.h> volatile MEM_PROGRAM_DATA_BLOCK instruction_t instruction[] = { {.opcode = OPCODE_PIN_STATE, .parameter0 = (void *)BLUE_LED_Pin, .parameter1 = (void *)BLUE_LED_GPIO_Port, .parameter2 = (void *)GPIO_PIN_SET}, {.opcode = OPCODE_DELAY, .parameter0 = (void *)1500}, {.opcode = OPCODE_PIN_TOGGLE, .parameter0 = (void *)BLUE_LED_Pin, .parameter1 = (void *)BLUE_LED_GPIO_Port}, {.opcode = OPCODE_JUMP, .parameter0 = (void *)1}, {.opcode = OPCODE_HALT}, }; #endif // __PROGRAMMA_H__","title":"Simple programma om de blauwe led te knipperen"},{"location":"year/2025/about/","text":"Over 2025","title":"Over"},{"location":"year/2025/about/#over-2025","text":"","title":"Over 2025"},{"location":"year/2025/program_specifications/","text":"Programnma specificaties Pins & Functies USART3 : Serial port voor sturen van informatie SYS : Debug: Serial wire, Timebase Source: TIM1 RCC : High speed clock and low speed clock based on cristals build in SPI1 : SD Card writer over SPI EXTI line 1 : Voor interrupt EXTI line 15 : Voor interrupt PINS PIN Assignment PA4 SPI1_CS PA5 SPI1_SCK PA6 SPI1_MISO PA7 SPI1_MOSI PA13 SYS_JTMS-SWDIO PA14 SYS_JTMS-SWCLK PB0 LED 1 [Green] - DefaultTask running PB1 GPIO External Interrupt mode with Rise Edge trigger detection - Emergency button PB3 SYT_JTDO-SWO PB7 LED 2 [Blue] PB14 LED 3 [Red] - HardFault_Handler entered PC14 RCC_OSC32 PC15 RCC_OSC32_OUT PD8 UART3_TX PD9 UART3_RX PH0 RCC_OSC_IN PH1 RCC_OSC_OUT","title":"Programma specificaties"},{"location":"year/2025/program_specifications/#programnma-specificaties","text":"","title":"Programnma specificaties"},{"location":"year/2025/program_specifications/#pins-functies","text":"USART3 : Serial port voor sturen van informatie SYS : Debug: Serial wire, Timebase Source: TIM1 RCC : High speed clock and low speed clock based on cristals build in SPI1 : SD Card writer over SPI EXTI line 1 : Voor interrupt EXTI line 15 : Voor interrupt","title":"Pins &amp; Functies"},{"location":"year/2025/program_specifications/#pins","text":"PIN Assignment PA4 SPI1_CS PA5 SPI1_SCK PA6 SPI1_MISO PA7 SPI1_MOSI PA13 SYS_JTMS-SWDIO PA14 SYS_JTMS-SWCLK PB0 LED 1 [Green] - DefaultTask running PB1 GPIO External Interrupt mode with Rise Edge trigger detection - Emergency button PB3 SYT_JTDO-SWO PB7 LED 2 [Blue] PB14 LED 3 [Red] - HardFault_Handler entered PC14 RCC_OSC32 PC15 RCC_OSC32_OUT PD8 UART3_TX PD9 UART3_RX PH0 RCC_OSC_IN PH1 RCC_OSC_OUT","title":"PINS"}]}